module Main exposing (..)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Utils exposing (..)
import Reaktion exposing (initialModel, startCmd)

main =
  Browser.element
    { init = init , update = update , subscriptions = subscriptions , view = view}


type Model
  = Reaktion Reaktion.Model

initialModel : Model
initialModel = Reaktion Reaktion.initialModel


type Msg
  = Home
  | GotoReaktion
--| Farben
  | ReaktionMsg Reaktion.Msg

init : () -> (Model, Cmd Msg)
init _ = ( initialModel, Cmd.none )


update: Msg -> Model -> (Model, Cmd Msg)
update msg model =
  case msg of
    Home ->
        ( initialModel
        , Cmd.none )

    GotoReaktion ->
        ( Reaktion Reaktion.initialModel
        , Cmd.none
        )

    ReaktionMsg pageMsg ->
        let
            ( Reaktion page, pageCmd ) = Reaktion.update pageMsg page
        in
            ( page, Html.map ReaktionMsg pageMsg )
{-
    PointMsg Point.Clicked ->
        ( model
        , Task.perform NextGame Time.now
        )

-}

subscriptions : Model -> Sub Msg
subscriptions model = Sub.none


viewPage : Model -> Html Msg
viewPage model =
    case model of
        Reaktion page ->
            Html.map ReaktionMsg (Reaktion.view page)

view : Model -> Html Msg
view model =
    div [ class "container"]
        [ h1 [] [text "Koffein"]
        , div [ class "row mt-5" ]
            [ viewPage model
            , button [ onClick GotoReaktion ] [ text "Reaktion" ]
            ]
        ]
